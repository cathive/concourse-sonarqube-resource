#!/bin/bash

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

root=$(dirname "${0}" | while read -r a; do cd "${a}" && pwd && break; done)
export root
# shellcheck source=./common.sh
source "${root}/common.sh"

source="${1}"

if [[ -z "${source}" ]]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi
if [[ ! -d "${source}" ]]; then
  echo "error: Source path (${source}) does not exist or is not a directory."
  exit 1
fi

cd "${source}"

payload=$(mktemp "${TMPDIR}/sonarqube-resource-out.XXXXXX")
cat > "${payload}" <&0

DEBUG="$(jq -r '.source.__debug // "false"' < "${payload}")"
enable_debugging "${DEBUG}"

echo "Preparing SonarQube scanner..."

scanner_opts=""

project_path=$(jq -r '.params.project_path // ""' < "${payload}")
if [[ -z "${project_path}" ]]; then
  echo "error: params.project_path has not been specified."
  exit 1
fi
if [[ ! -d "${project_path}" ]]; then
  echo "error: Project path (${project_path}) not found or not a directory."
  exit 1
fi

sonar_host_url=$(jq -r '.source.host_url // ""' < "${payload}")
if [[ -z "${sonar_host_url}" ]]; then
  echo "error: source.host_url has not been specified."
  exit 1
else
  scanner_opts+=" -Dsonar.host.url=${sonar_host_url}"
fi

sonar_organization=$(jq -r '.source.organization // ""' < "${payload}")
if [[ ! -z "${sonar_organization}" ]]; then
  scanner_opts+=" -Dsonar.organization=\"${sonar_organization}\""
fi

sonar_login=$(jq -r '.source.login // ""' < "${payload}")
if [[ ! -z "${sonar_login}" ]]; then
  scanner_opts+=" -Dsonar.login=\"${sonar_login}\""
fi

sonar_password=$(jq -r '.source.password // ""' < "${payload}")
if [[ ! -z "${sonar_password}" ]]; then
  scanner_opts+=" -Dsonar.password=\"${sonar_password}\""
fi

maven_settings_file=$(jq -r '.params.maven_settings_file // ""' < "${payload}")
if [[ ! -z "${maven_settings_file}" ]] && [[ -f "${maven_settings_file}" ]]; then
  scanner_opts+=" -s \"${maven_settings_file}\""
else
  maven_settings=$(jq -r '.source.maven_settings // ""' < "${payload}")
  if [[ ! -z "${maven_settings}" ]]; then
    maven_settings_file=$(mktemp "${TMPDIR}/sonarqube-resource-maven-settings.xml.XXXXXX")
    echo "${maven_settings}" > "${maven_settings_file}"
    scanner_opts+=" -s \"${maven_settings_file}\""
  fi
  unset maven_settings
fi

sonar_project_key=$(jq -r '.params.project_key // ""' < "${payload}")
if [[ ! -z "${sonar_project_key}" ]]; then
  scanner_opts+=" -Dsonar.projectKey=\"${sonar_project_key}\""
fi

sonar_project_name=$(jq -r '.params.project_name // ""' < "${payload}")
if [[ ! -z "${sonar_project_name}" ]]; then
  scanner_opts+=" -Dsonar.projectName=\"${sonar_project_name}\""
fi

sonar_project_description=$(jq -r '.params.project_description // ""' < "${payload}")
if [[ ! -z "${sonar_project_description}" ]]; then
  scanner_opts+=" -Dsonar.projectDescription=\"${sonar_project_description}\""
fi

sonar_project_version=$(jq -r '.params.project_version // ""' < "${payload}")
if [[ ! -z "${sonar_project_version}" ]]; then
  scanner_opts+=" -Dsonar.projectVersion=\"${sonar_project_version}\""
fi

sonar_project_version_file=$(jq -r '.params.project_version_file // ""' < "${payload}")
if [[ ! -z "${sonar_project_version_file}" ]]; then
  if [[ ! -f "${sonar_project_version_file}" ]]; then
    echo "error: Version file not found: ${sonar_project_version_file}"
    exit 1
  else
    sonar_project_version=$(cat "${sonar_project_version_file}")
    scanner_opts+=" -Dsonar.projectVersion=\"${sonar_project_version}\""
  fi
fi

sonar_branch_name=$(jq -r '.params.branch_name // ""' < "${payload}")
if [[ -z "${sonar_branch_name}" ]]; then
  # If the branch name has NOT been specified, we'll check if autodetect_branch_name
  # has been set to true and try to figure figure the branch out by using installed
  # SCM tools.
  autodetect_branch_name=$(jq -r '.params.autodetect_branch_name // "false"')
  if [[ "${autodetect_branch_name}" == "true" ]]; then
    echo "Trying to detect branch name automatically..."
    if [[ -d "${project_path}/.git" ]]; then
      sonar_branch_name=$(git --git-dir="${project_path}/.git" rev-parse --abbrev-ref HEAD)
    fi
    echo "Auto-detected branch name: \"${sonar_branch_name:-<nil>}\""
  fi
fi
# So... if the branch name has been either specified manually or we have been able
# to figure it out automatically using our SCM tools, we can pass sonar.branch.name
# to the sonar-scanner. Yay!!
if [[ ! -z "${sonar_branch_name}" ]]; then
  scanner_opts+=" -Dsonar.branch.name=\"${sonar_branch_name}\""
fi

sonar_branch_target=$(jq -r '.params.branch_target // ""' < "${payload}")
if [[ ! -z "${sonar_branch_target}" ]]; then
  scanner_opts+=" -Dsonar.branch.target=\"${sonar_branch_target}\""
fi

sonar_sources=$(jq -r '.params.sources // [] | join(",")' < "${payload}")
if [[ ! -z "${sonar_sources}" ]]; then
  scanner_opts+=" -Dsonar.sources=\"${sonar_sources}\""
fi

sonar_tests=$(jq -r '.params.tests // [] | join(",")' < "${payload}")
if [[ ! -z "${sonar_tests}" ]]; then
  scanner_opts+=" -Dsonar.tests=\"${sonar_tests}\""
fi

scanner_type=$(jq -r '.params.scanner_type // ""' < "${payload}")
scanner_bin="sonar-scanner"
scanner_report_file="./.scannerwork/report-task.txt"
if [[ -z "${scanner_type}" ]] || [[ "${scanner_type}" == "auto" ]]; then
  if [[ -f "${project_path}/pom.xml" ]]; then
    scanner_type="maven"
    mvn="mvn"
    if [[ "${DEBUG}" == "true" ]]; then
      mvn+=" -X"
    fi
    scanner_bin="${mvn} -q org.sonarsource.scanner.maven:sonar-maven-plugin:3.4.0.905:sonar"
    # shellcheck disable=SC2016
	if [[ ! -z "${maven_settings_file}" ]]; then
		echo "option_1"
		scanner_report_file="$(${mvn} -q -f "${project_path}/pom.xml" -Dexec.executable="echo" -Dexec.args='${project.build.directory}' --non-recursive exec:exec --settings ${maven_settings_file} )/sonar/report-task.txt" 
    else
		echo "option_2"
		scanner_report_file="$(${mvn} -q -f "${project_path}/pom.xml" -Dexec.executable="echo" -Dexec.args='${project.build.directory}' --non-recursive exec:exec )/sonar/report-task.txt" 
	fi
  else
    scanner_type="cli"
  fi
fi

# If any additional properties have been specified, we'll just append them to the
# command line. We don't check for any duplicates that might have been created due to
# the fact that some "basic" properties might have specified a second time as
# "additional" property.
additional_properties=$(jq -r '.params.additional_properties // ""' < "${payload}")
if [[ ! -z "${additional_properties}" ]]; then
  while read -r name value; do
    prop_kv="$name=\"$value\""
    scanner_opts+=" -D${prop_kv}"
  done < <(jq -r 'to_entries[] | "\(.key) \(.value)"' <<< "${additional_properties}")
fi

cd "${project_path}"
echo "Starting sonar-scanner (type: ${scanner_type})..."
eval "${scanner_bin} ${scanner_opts}"

echo "Reading SonarQube scanner report (${scanner_report_file})..."
if [[ -f "${scanner_report_file}" ]]; then
  eval "$(read_properties "${scanner_report_file}")"
  if [[ -z "${serverVersion:-}" ]]; then
    # Older versions of SonarQube don't store the serverVersion in
    # report-task.txt. There is a REST API though, that can be used
    # to fetch the version.
    serverVersion="$(sq_server_version "${sonar_login}":"${sonar_password}" "${sonar_host_url}")"
  fi
else
  echo "error: SonarQube report could not be located."
  exit 1
fi

jq -n "{
  version: {ce_task_id: \"${ceTaskId:?}\"},
  metadata: [
    { name: \"project_key\", value: \"${projectKey:?}\" },
    { name: \"server_url\", value: \"${serverUrl:?}\" },
    { name: \"server_version\", value: \"${serverVersion:?}\" },
    { name: \"dashboard_url\", value: \"${dashboardUrl:?}\" },
    { name: \"ce_task_url\", value: \"${ceTaskUrl:?}\" },
    { name: \"scanner_type\", value: \"${scanner_type}\" }
  ]
}" >&3
